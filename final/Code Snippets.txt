Code snippets


1.	Webscrapper

#import all libraries
import urllib
from bs4 import BeautifulSoup
from pymongo import MongoClient
from datetime import datetime
import calendar
#import scrapy
import re
from bson.objectid import ObjectId
import pymongo
def parseEventPage(month, year):
    #Download the Page Content
    URL = 'https://en.wikipedia.org/wiki/Portal:Current_events/%s_%s' %(month,year)    
    data = urllib.request.urlopen(URL).read()
    soup = BeautifulSoup(data,'html.parser')    

    #Selecting the Title
    body = soup.find('body')
    
    ## define a mongodb client, create a database names WikiEvent
    client = pymongo.MongoClient("localhost", 27017)
    db = client['WikiEvent']
    serverStatusResult=db.command("serverStatus")
    check=body.find_all('tr')[1]
    ## extract date for events
    datetables = body.find_all('table', attrs={'class':'plainlinks'})

    ## events on each day identified by td tag with description class attribute
    for date, dailyevent in zip(datetables, body.find_all('td', attrs={'class':'description'})):
        print ('Hi, are you there')
        datenumber = datetime.strptime(re.sub('\s*','',date.find('span', attrs={'class':'bday dtstart published updated'}).text), '%Y-%m-%d')
        datenumber=datenumber.strftime('%b/%d/%Y')
        
        ##categories identified with dt tag
        categories = dailyevent.find_all('dt')
         #double equal loop, category and concrete events
        for category,eventcategory in zip(categories,dailyevent.find_all('ul', recursive = False)):
            categorytext = category.text
            
            ## single event identified with li tag. if event has specific event entity page, there will be one more li tag
            for singleevent in eventcategory.find_all('li', recursive=False):
                
                ## event has wikipage
                if singleevent.find('ul'):

                    singles = singleevent.find_all('ul')
                   
                    singleeventsummary = singles.pop().text  ## last li tag, event summary

                    ## event title may have multiple subtitles
                    title = [st.get('href') for st in singleevent.find_all('a', recursive=False)]
                    ## subtitle exists
                    if singles:
                        title = title + [single.find('a').get('href') for single in singles]
                    entities = [entitylink.get('href') for entitylink in singleevent.find('ul').find('li').find_all('a') if entitylink.get('title')]
                    external = singleevent.find_all('a', attrs={'class': 'external text'})
                    external_link = [e.get('href') for e in external if external]
                else:
                    title = False
                    singleeventsummary = singleevent.text
                    entities = [entitylink.get('title') for entitylink in singleevent.find_all('a') if entitylink.get('title')]
                    
                    external = singleevent.find_all('a', attrs={'class':'external text'})
                    external_link = [e.get('href') for e in external if external]
                myrecord={"date": datenumber,
                          "category": categorytext,
                          "event_title": title,
                          "event_summary": singleeventsummary,
                          "entities": entities,
			              "person": False,
			              "external_link": external_link
                         }
                db.events_entity_title.insert_one(myrecord)
# calling functions
if __name__ == '__main__':
    year = ['2016','2017','2018','2019']
    month = [calendar.month_name[i].capitalize()for i in range(1,13)]
    print(month)
    month1= [calendar.month_name[i].capitalize()for i in range(1,5)]
    month2= [calendar.month_name[i].capitalize()for i in range(1,10)]
    
    for y in year:
        if y=='2016':
            for m in month:
                print (y,m)
                parseEventPage(m,y)
        elif y=='2017':
                for m in month2:
                    print (y,m)
                    parseEventPage(m,y)
                parseEventPage2('October','2017')
                parseEventPage2('November','2017')
                parseEventPage2('December','2017')
        elif y=='2018':
                for m in month:
                    print (y,m)
                    parseEventPage2(m,y)
        elif y=='2019':
                for m in month1:
                    print (y,m)
                    parseEventPage2(m,y)
2.	CoreNLP (Tokenization, POS tagging, Parse Tree)
# import libraries
from stanfordcorenlp import StanfordCoreNLP
import logging
import json
import pandas as pd
import os
import numpy as np
from graphviz import Source     

#Stanford corenlp connecting to server

class StanfordNLP:
    def __init__(self, host='http://localhost', port=9000):
        self.nlp = StanfordCoreNLP(host, port=port,
                                   timeout=30000)  # , quiet=False, logging_level=logging.DEBUG)
        self.props = {
            'annotators': 'tokenize,ssplit,pos,lemma,ner,parse,depparse,dcoref,relation',
            'pipelineLanguage': 'en',
            'outputFormat': 'json'
        }
    def word_tokenize(self, sentence):
        return self.nlp.word_tokenize(sentence)
    def pos(self, sentence):
        return self.nlp.pos_tag(sentence)
    def ner(self, sentence):
        return self.nlp.ner(sentence)
    def parse(self, sentence):
        return self.nlp.parse(sentence)
    def dependency_parse(self, sentence):
        return self.nlp.dependency_parse(sentence)
    def annotate(self, sentence):
        return json.loads(self.nlp.annotate(sentence, properties=self.props))
    @staticmethod
  def tokens_to_dict(_tokens):
        tokens = defaultdict(dict)
        for token in _tokens:
            tokens[int(token['index'])] = {
                'word': token['word'],
                'lemma': token['lemma'],
                'pos': token['pos'],
                'ner': token['ner']
            }
        return tokens
# Retrieving data from CSV
df = pd.read_csv('newsdataset1.csv')
df['event_summary']=df.event_summary.astype(str)
# Calling corenlp function 
sNLP = StanfordNLP()
from nltk.tree import Tree
from nltk.parse.corenlp import CoreNLPParser
from nltk.parse.stanford import StanfordDependencyParser
if __name__ == '__main__':
    sNLP = StanfordNLP()
    for i in range(0,9500):
        print(i)
        text = mdf['event_summary'][i]
        mdf.loc[i,'Parse Tree']= sNLP.parse(text)
        print(mdf.loc[i,'Parse Tree'])


3.	Semnatic Annotaion Interface






# Getting argumnets in html format

m=0
pp=0
for i in range(0,2000):
    if pp==100:
        pp=0
    string=event_df.loc[i,'event_summary']
    iid=event_df.loc[i,'event_id']
#     print(string)
    print("ID: "+str(iid))
    k=0
    for j in range (0,10793):
        if Args_df.loc[j,'event_id']==event_df.loc[i,'event_id']:
#             print(Args_df.loc[j,'event_id'])
#             print(Args_df.loc[j,'argtext'])
#             print(event_df.loc[i,'event_id'])
#             print(Args_df.loc[j,'event_summary'])
            k=k+1
#     print("................................")
#     print(k) 
#     print("................................")

        
#     print(k)  
#     print(string)
    n=m+k
#     print(m)
#     print(n)
#     if Args_df.loc[j,'event_id']==event_df.loc[i,'event_id']:
    for x in range(m,n):
        
        
        if Args_df.loc[x,'argtext'] in string:
            if pp==100:
                pp=0
            pos = string.find( Args_df.loc[x,'argtext'] )
            epos = pos +len(Args_df.loc[x,'argtext'])
            string=string[:pos]+" <span class=span1 id="+str(Args_df.loc[x,'Arg_ID'])+" style='background-color:"+colors[pp]+";'> "+Args_df.loc[x,'argtext']+" </span>"+string[epos:]

#             string=string.replace(Args_df.loc[x,'argtext'],"<span id="+str(Args_df.loc[x,'Arg_ID'])+" style='background-color:"+colors[pp]+"; display:inline-block; overflow: hidden;text-overflow:ellipsis;width:auto;padding:2px 5px; margin: 0 5px; border-radius: 10px' >"+Args_df.loc[x,'argtext']+"</span>")
            pp=pp+1
        else:
            print("hi")
            print(Args_df.loc[x,'Arg_ID'])
            print(Args_df.loc[x,'argtext'])
            print(event_df.loc[i,'event_id'])
#     print(string+"\n")
    event_df.loc[i,'eventsummary']=string+" "
   
    m=x+1




 
                #Creating each word a button

# pd.options.display.float_format = '{:,.0f}'.format
m=0
pp=0
abc=[]
span=[]
import re
for i in range(0,2000):
    string=event_df.loc[i,'eventsummary']
    iid=event_df.loc[i,'event_id']
#     print(df.loc[i,"event_summary"])
#     print(string)
    print("ID"+str(iid))
    k=0
    for j in range (0,37117):
        if df_button.loc[j,'event_id']==event_df.loc[i,'event_id']:
#             print(Args_df.loc[j,'event_id'])
#             print(Args_df.loc[j,'argtext'])
#             print(event_df.loc[i,'event_id'])
#             print(Args_df.loc[j,'event_summary'])
            k=k+1
    print("................................")
    print(k) 
    print("................................")

        
#     print(k)  
#     print(string)
    n=m+k
    print(m)
    print(n)
    for x in range(m,n):
        if df_button.loc[x,'Button'] in string :
            search_str=df_button.loc[x,'Button']
            print(search_str)            list1=["About","In","Protest","Based","FBI","Jailed","Head","Fracking","Justify","Outside","Using","Kenyan","Iowa","TMobile","Updated","Ambassador","Failed","More","For","North","Farright","Without","Presenting","Previously","Reacting","JaisheMohammed","Retired","Refuse","Among","Coinciding","earlier","Italian","Both","abdicate","Rightwing","dead","Chinese","Government","Shortly","With","Campaigning","Because","Marking","Government","Germany","When","An","Citing","Shelling","Armed","ProBeijing","Amidst","Recounts","Despite","Will","As","Fires","Houthi","Before","Illegally","British","From","On","Suspect","Per","Over","Record","Imprisoned","Three","According","Amid","German","Around","While","Atleast","At","The","During","Search","Following","Counting","Syrian","After","Argentinas","Saudiled","A","Iraqi","Defending","Due","Hedge","Former","Under"]
            if search_str in list1:
                span1=re.search(r"("+df_button.loc[x,'Button']+")[^a-zA-Za.-z.A.-Z.]", string)
                span=span1.span()
                pos=span[0]
                epos=span[1]
#             elif re.match(r"\s(\w+)$", search_str):  
#                 span1=re.search(r"\s(\w+)$"+(df_button.loc[x,'Button'])+"[^a-zA-Z]", string)

            else:
#                 myex = re.compile(r"(@|span)")
                span1=re.search(r"[^(?<=a-zA-Z|span|EAB|#A5|input|type|style='|1|<span)]"+(df_button.loc[x,'Button'])+"[^a-zA-Za.-z.A.-Z.]", string)
            
            
                span=span1.span()
#             print(span)
                pos=span[0]
                epos=span[1]
                pos=pos+1
                epos=epos-1
            string=string[:pos]+"<input class=mydiv id="+str(int(df_button.loc[x,'pos']))+" type='button' value="+df_button.loc[x,'Button']+">"+string[epos:]
        else:
            print("hi")
            print(df_button.loc[x,'Button'])
            print(event_df.loc[i,'event_id'])
    event_df.loc[i,'eventsummary2']=string   
    m=x+1

HTML CODE:

<!DOCTYPE html>
<html>

<head>
    <title>Table with database</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <link rel="stylesheet" href="style.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.18/angular.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>


</head>

<body>
<div class="header">
  <img src="logo.png" alt="logo" />
  <h1>Semantic Annotation Interface</h1>
</div>
    <!-- <h1 align="center">Semantic Annotations Interface</h1><br> -->
    <table id=newsSample>
        <tr>
            <th>Event ID </th>
            <th>Event Summary</th>
            <!-- <th>Relation Phrase</th> -->
        </tr>

        <?php
        if (isset($_GET['pageno'])) {
            $pageno = $_GET['pageno'];
        } else {
            $pageno = 1;
        }
        // echo $pageno;
        $no_of_records_per_page = 50;
        $offset = ($pageno-1) * $no_of_records_per_page;
        // echo $offset;
        $conn = mysqli_connect("localhost", "root", "", "news event extraction");

        // Check connection
        if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
        }
        $total_pages_sql = "SELECT COUNT(*) FROM events AS e JOIN event_args AS ea ON  e.event_id=ea.event_id";
        $result = mysqli_query($conn, $total_pages_sql);
        $total_rows = mysqli_fetch_array($result)[0];
        $total_pages = ceil($total_rows / $no_of_records_per_page);
        //$sql = "SELECT event_id, event_summary, parsetree FROM events";
        //    $sql = "SELECT event_summary FROM events";
        $sql = "SELECT  * FROM events AS e JOIN event_args AS ea ON  e.event_id=ea.event_id LIMIT $offset,
     $no_of_records_per_page";

        //     $sql ="SELECT * FROM events UNION ALL SELECT events.event_pos event_args ON  events.event_id=event_args.event_id"; 
        //    $sql.="SELECT IF (event)";

        $result = $conn->query($sql);
        //    echo $result;
        if (!$result) {
            trigger_error('Invalid query: ' . $conn->error);
        }
        if ($result->num_rows > 0) {
            // output data of each row
            $last_event_id = -1;
            $page_text = '';
            while ($row = $result->fetch_assoc()) {
                if ($last_event_id == -1) {
                    $last_event_id = $row['event_id'];

                    $page_text = '<tr><td>' . $last_event_id . '</td><td>' . $row['event_summary'] . '</td>';
                } else if ($last_event_id != $row['event_id']) {
                    $page_text = $page_text . '</td></tr>';
                    //        echo $page_text;

                    $page_text = $page_text . '<tr><td>' . $row['event_id'] . '</td><td>' . $row['event_summary'] . '</td><td>';

                    $last_event_id = $row['event_id'];
                }
            }
            $page_text = $page_text . '</td></tr>';
            echo $page_text;
            echo "</table>";
        } else {
            echo "0 results";
        }
        $conn->close();
        ?>
        <ul class="pagination">
            <li><a href="?pageno=1">First</a></li>
            <li class="<?php if ($pageno <= 1) {
                            echo 'disabled';
                        } ?>">
                <a href="<?php if ($pageno <= 1) {
                                echo '#';
                            } else {
                                echo "?pageno=" . ($pageno - 1);
                            } ?>">Prev</a>
            </li>
            <li class="<?php if ($pageno >= $total_pages) {
                            echo 'disabled';
                        } ?>">
                <a href="<?php if ($pageno >= $total_pages) {
                                echo '#';
                            } else {
                                echo "?pageno=" . ($pageno + 1);
                            } ?>">Next</a>
            </li>
            <li><a href="?pageno=<?php echo $total_pages; ?>">Last</a></li>
        </ul>
    </table>

    <script>
        im = -1
        $('#newsSample tr').each(function() {
            $(this).find('td:eq(1) span').each(function() {

                im = im + 1
                $(this).append($("<span id=" + im + " ><form id=myForm><input id=input1 type='radio' name='importance' value='important' checked>Important<br><input id=input2 type='radio' name='importance' value='not_important'>Not important  </form></span>").css("display", "none"));

                $(this).find('span').append($("<form id=textform><input id=input3 type=text  name='text' value=''/><input id=button text value=&#10003  type='button'/></form>").css("display", "none"));

                $(this).hover(
                    function() {

                        $(this).find("span").css("display", "block");

                        $(this).find("#myForm input:radio").click(function() {
                            if ($(this).is(':checked') && $(this).val() == "important") {
                                var check = $(this).val();
                                //                                  var text=$(this).closest('span').text();
                                //                                 var col = $(this).parent().children().index($(this));
                                var id = $(this).closest('span').attr('id');
                                //                                  console.log(text)
                                console.log(id)
                                $(this).closest('td').find('#' + id).css({
                                    'background-color': 'red'
                                });
                                //                                  var text=$(this).closest('span').text();
                                //                                  console.log(text);



                                $.ajax({
                                    url: 'save.php',
                                    type: 'POST',
                                    data: {
                                        check: check,
                                        id: id
                                    },
                                    success: function(data) {
                                        console.log(data);
                                    }
                                });
                                $(this).closest('span').find('#textform').css("display", "block");
                                //                                  
                                $(this).closest('span').find('#textform #button').on('click', function() {
                                    var text = $(this).closest('span').find('#input3').val();
                                    var id = $(this).closest('span').attr('id');

                                    console.log("ich bin hier");
                                    console.log(id);
                                    $.ajax({
                                        url: 'text.php',
                                        type: 'POST',
                                        data: {
                                            text: text,
                                            id: id
                                        },
                                        success: function(data) {
                                            console.log(data);
                                        }
                                    });
                                });
                                //                             var x=$(this).closest('span').css({'pointer-events': 'none'});     
                                //                              $(this).closest('td').find('#'+id).css({'pointer-events': 'none'});

                                //                              $(this).css({'pointer-events': 'none'});

                            } else if ($(this).is(':checked') && $(this).val() == "not_important") {
                                var check = $(this).val();
                                //                                 var col = $(this).parent().children().index($(this));
                                var id = $(this).closest('span').attr('id');
                                //                                  console.log(col)
                                console.log(id)

                                $.ajax({
                                    url: 'save.php',
                                    type: 'POST',
                                    data: {
                                        check: check,
                                        id: id
                                    },
                                    success: function(data) {
                                        console.log(data);
                                    }
                                });
                                //                                 alert('notimportant'); 
                                //                                  $('#employee_table tr').find("td:nth-child("+j+")").eq(i).append("<span style='background-color : orange; padding:2px 5px; margin: 0 5px; border-radius: 10px'>Not Important</span>");
                            }

                        });









                    },
                    function() {
                        $(this).find("span").css("display", "none");


                    }
                );
            });






        });
        $('<th>' + "Relation Phrase" + '</th>').insertAfter($('tr').first().find('th:last'));
        // $(this).find('#newsSample tr').each(function() {

        $('<td></td>').insertAfter($('td').eq(1));

        $('#newsSample tr').find(' td:eq(2)').append('<button  id=save type="button" class=myButton value="Save">Save</button>')

        //         $('td').eq(2).append("<div id=mydiv2 style='background-color:rgba(248, 150, 230, 1);'>" + val2 + '</div><a href="#" class="close-icon"></a>');
        //
        // });
        var j = -1;
        var list1 = []
        $('#newsSample tr').find('td:eq(1) .mydiv').on('click', function() {
            $(this).closest('tr').find('td:eq(2) .myButton').css("display", "block");
            var val2 = $(this).val();
            var id = $(this).attr('id');
            console.log(id);
            // j=j+1;
            console.log(list1);
            // $var=$(this).closest('tr').find('td').eq(2).text();
            if (!$(this).closest('tr').find('td').eq(2).is(':contains(' + val2 + ')')) {
                $(this).closest('tr').find('td').eq(2).append("<div id=" + id + " class=span1 style='background-color:rgba(248, 150, 230, 1);'>" + val2 +" "+ '<input type=button id=' + id + ' href="#" class="close-icon"/></div>');
                // $(this).closest('tr').find('td').eq(2).append("<div> </div?");
            }

            $(this).closest('tr').find(' td:eq(2)  #' + id).on('click', function() {
                // var id2=$(this).closest('tr').find(' td:eq(2) #'+id).attr('id');
                // console.log(id2);
                $(this).closest('tr').find(' td:eq(2)  #' + id).remove();


            });

        });

        $('#newsSample tr').find('td:eq(2) #save').on('click', function() {

            var relphrase = $(this).closest('tr').find(' td:eq(2) div').text();
            var eventid=$(this).closest('tr').find(' td:eq(0)').text();
            // var annotatorid=<?php ?>
            

            console.log(relphrase);
            console.log(eventid);
            $(this).closest('tr').find(' td:eq(1) ').css({
                'pointer-events': 'none'
            });
            // $.ajax({
            //     url: 'relphrase.php',
            //     type: 'POST',
            //     data: {
            //         relphrase: relphrase,
            //         eventid: eventid
            //     },
            //     success: function(data) {
            //         console.log(data);
            //     }
            // });

        });

        //        
    </script>

</body>

</html>




